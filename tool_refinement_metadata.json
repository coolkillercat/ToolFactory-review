{
  "tools": [
    {
      "path": "extractor\\apidocs\\0\\leave_a_table_GET.py",
      "function_name": "leave_a_table",
      "api_description": "Leave a session. Can only call this route when the game has not started.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\1\\create_key_GET.py",
      "function_name": "create_key",
      "api_description": "Creates a key. All parameters are optional.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\1\\\\create_key_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\1\\get_api_stats_GET.py",
      "function_name": "get_api_stats",
      "api_description": "Get some CountABC stats.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\1\\\\get_api_stats_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\1\\get_key_info_GET.py",
      "function_name": "get_key_info",
      "api_description": "Get information about a key. Optionally specify the namespace.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\1\\\\get_key_info_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\1\\get_key_value_GET.py",
      "function_name": "get_key_value",
      "api_description": "Get the value of a key. Optionally specify the namespace.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\1\\hit_key_GET.py",
      "function_name": "hit_key",
      "api_description": "An easier way to track incrementing by one keys. This endpoint will create a key if it doesn't exist and increment it by one on each subsequent request. Optionally specify a namespace.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\1\\\\hit_key_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\1\\set_key_value_GET.py",
      "function_name": "set_key_value",
      "api_description": "Set the value of a key. Optionally specify the namespace. The key must be created with enable_reset set to true.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\1\\\\set_key_value_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\1\\update_key_value_GET.py",
      "function_name": "update_key_value",
      "api_description": "Updates a key with +/- amount. Optionally specify the namespace. The amount must be within update_lowerbound and update_upperbound specified during the creation of the key.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\1\\\\update_key_value_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\10\\create_json_POST.py",
      "function_name": "create_json",
      "api_description": "Create a JSON bin.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\10\\request_all_bin_ids_GET.py",
      "function_name": "request_all_bin_ids",
      "api_description": "Return all bin IDs.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\100\\full_height_capture_GET.py",
      "function_name": "full_height_capture",
      "api_description": "Capture a full-height screenshot of a website.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\100\\http_headers_capture_GET.py",
      "function_name": "http_headers_capture",
      "api_description": "Capture a screenshot of a website with custom HTTP headers.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\100\\thumbnail_capture_GET.py",
      "function_name": "thumbnail_capture",
      "api_description": "Capture a thumbnail of a website.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\103\\batch_language_detection_GET.py",
      "function_name": "batch_language_detection",
      "api_description": "Use the batch language detection endpoint to request the API to identify a series of query texts at once.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\109\\create_account_POST.py",
      "function_name": "create_account",
      "api_description": "Creates an Account resource (Registration).",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\109\\get_current_account_GET.py",
      "function_name": "get_current_account",
      "api_description": "Returns the Account resource that matches the Bearer token that sent the request.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\109\\get_message_source_GET.py",
      "function_name": "get_message_source",
      "api_description": "Gets a Message's Source resource.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\113\\check_email_GET.py",
      "function_name": "check_email",
      "api_description": "Checks for new email on the server.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\115\\debug_bedrock_GET.py",
      "function_name": "debug_bedrock",
      "api_description": "Debugs the response of a Minecraft Bedrock server.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\115\\debug_ping_GET.py",
      "function_name": "debug_ping",
      "api_description": "Debugs the ping response of a Minecraft server.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\118\\get_all_active_players_GET.py",
      "function_name": "get_all_active_players",
      "api_description": "Retrieves all active players.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\118\\get_all_advanced_stats_GET.py",
      "function_name": "get_all_advanced_stats",
      "api_description": "Retrieves all advanced stats.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\118\\get_all_games_GET.py",
      "function_name": "get_all_games",
      "api_description": "Retrieves all games.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\118\\get_all_players_GET.py",
      "function_name": "get_all_players",
      "api_description": "Retrieves all players.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\118\\get_all_stats_GET.py",
      "function_name": "get_all_stats",
      "api_description": "Retrieves all stats.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\118\\get_live_box_scores_GET.py",
      "function_name": "get_live_box_scores",
      "api_description": "Retrieves all live box scores for the current day updated in real time.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\121\\thing_items_GET.py",
      "function_name": [],
      "api_description": {
        "title": "BGG XML API2 Documentation",
        "endpoints": [
          {
            "name": "Thing Items",
            "description": "Retrieve information about physical, tangible products in the BGG database.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/thing?",
            "headers": [],
            "required_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "Specifies the id of the thing(s) to retrieve. Can be a comma-delimited list of ids.",
                "default": null,
                "example": "123,456"
              }
            ],
            "optional_parameters": [
              {
                "name": "type",
                "type": "string",
                "description": "Specifies the type of thing to filter results by. Can be a comma-delimited list of types.",
                "default": null,
                "example": "boardgame,boardgameexpansion"
              },
              {
                "name": "versions",
                "type": "integer",
                "description": "Returns version info for the item.",
                "default": null,
                "example": "1"
              },
              {
                "name": "videos",
                "type": "integer",
                "description": "Returns videos for the item.",
                "default": null,
                "example": "1"
              },
              {
                "name": "stats",
                "type": "integer",
                "description": "Returns ranking and rating stats for the item.",
                "default": null,
                "example": "1"
              },
              {
                "name": "historical",
                "type": "integer",
                "description": "Not currently supported. Returns historical data over time.",
                "default": null,
                "example": "1"
              },
              {
                "name": "marketplace",
                "type": "integer",
                "description": "Returns marketplace data.",
                "default": null,
                "example": "1"
              },
              {
                "name": "comments",
                "type": "integer",
                "description": "Returns all comments about the item. Also includes ratings when commented.",
                "default": null,
                "example": "1"
              },
              {
                "name": "ratingcomments",
                "type": "integer",
                "description": "Returns all ratings for the item. Also includes comments when rated.",
                "default": null,
                "example": "1"
              },
              {
                "name": "page",
                "type": "integer",
                "description": "Controls the page of data to see for historical info, comments, and ratings data. Defaults to 1.",
                "default": 1,
                "example": "1"
              },
              {
                "name": "pagesize",
                "type": "integer",
                "description": "Set the number of records to return in paging. Minimum is 10, maximum is 100.",
                "default": null,
                "example": "50"
              },
              {
                "name": "from",
                "type": "string",
                "description": "Not currently supported. Filter results from a specific date (YYYY-MM-DD).",
                "default": null,
                "example": "2023-01-01"
              },
              {
                "name": "to",
                "type": "string",
                "description": "Not currently supported. Filter results to a specific date (YYYY-MM-DD).",
                "default": null,
                "example": "2023-12-31"
              }
            ]
          },
          {
            "name": "Family Items",
            "description": "Retrieve information about more abstract or esoteric concepts represented by a family in the BGG database.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/family?",
            "headers": [],
            "required_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "Specifies the id of the family to retrieve. Can be a comma-delimited list of ids.",
                "default": null,
                "example": "123,456"
              }
            ],
            "optional_parameters": [
              {
                "name": "type",
                "type": "string",
                "description": "Specifies the type of family to filter results by. Can be a comma-delimited list of types.",
                "default": null,
                "example": "rpg,boardgamefamily"
              }
            ]
          },
          {
            "name": "Forum Lists",
            "description": "Request a list of forums for a particular type/id.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/forumlist?",
            "headers": [],
            "required_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "Specifies the id of the type of database entry you want the forum list for.",
                "default": null,
                "example": "123"
              }
            ],
            "optional_parameters": [
              {
                "name": "type",
                "type": "string",
                "description": "The type of entry in the database.",
                "default": null,
                "example": "thing"
              }
            ]
          },
          {
            "name": "Forums",
            "description": "Request a list of threads in a particular forum.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/forum?",
            "headers": [],
            "required_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "Specifies the id of the forum.",
                "default": null,
                "example": "123"
              }
            ],
            "optional_parameters": [
              {
                "name": "page",
                "type": "integer",
                "description": "The page of the thread list to return; page size is 50.",
                "default": 1,
                "example": "1"
              }
            ]
          },
          {
            "name": "Threads",
            "description": "Request forum threads by thread id.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/thread?",
            "headers": [],
            "required_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "Specifies the id of the thread to retrieve.",
                "default": null,
                "example": "123"
              }
            ],
            "optional_parameters": [
              {
                "name": "minarticleid",
                "type": "string",
                "description": "Filters the results so that only articles with an equal or higher id than specified will be returned.",
                "default": null,
                "example": "100"
              },
              {
                "name": "minarticledate",
                "type": "string",
                "description": "Filters the results so that only articles on the specified date or later will be returned (YYYY-MM-DD).",
                "default": null,
                "example": "2023-01-01"
              },
              {
                "name": "minarticledate",
                "type": "string",
                "description": "Filters the results so that only articles after the specified date and time (YYYY-MM-DD HH:MM:SS) or later will be returned.",
                "default": null,
                "example": "2023-01-01 12:00:00"
              },
              {
                "name": "count",
                "type": "integer",
                "description": "Limits the number of articles returned to no more than specified.",
                "default": null,
                "example": "10"
              },
              {
                "name": "username",
                "type": "string",
                "description": "Not currently supported.",
                "default": null,
                "example": "john_doe"
              }
            ]
          },
          {
            "name": "Users",
            "description": "Request basic public profile information about a user by username.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/user?",
            "headers": [],
            "required_parameters": [
              {
                "name": "name",
                "type": "string",
                "description": "Specifies the user name (only one user is requestable at a time).",
                "default": null,
                "example": "john_doe"
              }
            ],
            "optional_parameters": [
              {
                "name": "buddies",
                "type": "integer",
                "description": "Turns on optional buddies reporting. Results are paged.",
                "default": null,
                "example": "1"
              },
              {
                "name": "guilds",
                "type": "integer",
                "description": "Turns on optional guilds reporting. Results are paged.",
                "default": null,
                "example": "1"
              },
              {
                "name": "hot",
                "type": "integer",
                "description": "Include the user's hot 10 list from their profile. Omitted if empty.",
                "default": null,
                "example": "1"
              },
              {
                "name": "top",
                "type": "integer",
                "description": "Include the user's top 10 list from their profile. Omitted if empty.",
                "default": null,
                "example": "1"
              },
              {
                "name": "domain",
                "type": "string",
                "description": "Controls the domain for the users hot 10 and top 10 lists. The default is boardgame.",
                "default": "boardgame",
                "example": "rpg"
              },
              {
                "name": "page",
                "type": "integer",
                "description": "Specifies the page of buddy and guild results to return. The default page is 1.",
                "default": 1,
                "example": "1"
              }
            ]
          },
          {
            "name": "Guilds",
            "description": "Request information about particular guilds.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/guild?",
            "headers": [],
            "required_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "ID of the guild you want to view.",
                "default": null,
                "example": "123"
              }
            ],
            "optional_parameters": [
              {
                "name": "members",
                "type": "integer",
                "description": "Include member roster in the results. Member list is paged and sorted.",
                "default": null,
                "example": "1"
              },
              {
                "name": "sort",
                "type": "string",
                "description": "Specifies how to sort the members list; default is username.",
                "default": "username",
                "example": "date"
              },
              {
                "name": "page",
                "type": "integer",
                "description": "The page of the members list to return. Page size is 25.",
                "default": 1,
                "example": "1"
              }
            ]
          },
          {
            "name": "Plays",
            "description": "Request plays logged by a particular user or for a particular item.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/plays?",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "username",
                "type": "string",
                "description": "Name of the player you want to request play information for. Data is returned in backwards-chronological form.",
                "default": null,
                "example": "john_doe"
              },
              {
                "name": "id",
                "type": "string",
                "description": "Id number of the item you want to request play information for. Data is returned in backwards-chronological form.",
                "default": null,
                "example": "123"
              },
              {
                "name": "type",
                "type": "string",
                "description": "Type of the item you want to request play information for. Valid types include: thing, family.",
                "default": null,
                "example": "thing"
              },
              {
                "name": "mindate",
                "type": "string",
                "description": "Returns only plays of the specified date or later (YYYY-MM-DD).",
                "default": null,
                "example": "2023-01-01"
              },
              {
                "name": "maxdate",
                "type": "string",
                "description": "Returns only plays of the specified date or earlier (YYYY-MM-DD).",
                "default": null,
                "example": "2023-12-31"
              },
              {
                "name": "subtype",
                "type": "string",
                "description": "Limits play results to the specified TYPE; boardgame is the default. Valid types include: boardgame, boardgameexpansion, boardgameaccessory, boardgameintegration, boardgamecompilation, boardgameimplementation, rpg, rpgitem, videogame.",
                "default": "boardgame",
                "example": "boardgame"
              },
              {
                "name": "page",
                "type": "integer",
                "description": "The page of information to request. Page size is 100 records.",
                "default": 1,
                "example": "1"
              }
            ]
          },
          {
            "name": "Collection",
            "description": "Request details about a user's collection.",
            "method": "GET",
            "url": "https://boardgamegeek.com/xmlapi2/collection?",
            "headers": [],
            "required_parameters": [
              {
                "name": "username",
                "type": "string",
                "description": "Name of the user to request the collection for.",
                "default": null,
                "example": "john_doe"
              }
            ],
            "optional_parameters": [
              {
                "name": "version",
                "type": "integer",
                "description": "Returns version info for each item in your collection.",
                "default": null,
                "example": "1"
              },
              {
                "name": "subtype",
                "type": "string",
                "description": "Specifies which collection you want to retrieve. TYPE may be boardgame, boardgameexpansion, boardgameaccessory, rpgitem, rpgissue, or videogame; the default is boardgame.",
                "default": "boardgame",
                "example": "boardgame"
              },
              {
                "name": "excludesubtype",
                "type": "string",
                "description": "Specifies which subtype you want to exclude from the results.",
                "default": null,
                "example": "boardgameexpansion"
              },
              {
                "name": "id",
                "type": "string",
                "description": "Filter collection to specifically listed item(s). Can be a comma-delimited list of item ids.",
                "default": null,
                "example": "123,456"
              },
              {
                "name": "brief",
                "type": "integer",
                "description": "Returns more abbreviated results.",
                "default": null,
                "example": "1"
              },
              {
                "name": "stats",
                "type": "integer",
                "description": "Returns expanded rating/ranking info for the collection.",
                "default": null,
                "example": "1"
              },
              {
                "name": "own",
                "type": "integer",
                "description": "Filter for owned games. Set to 0 to exclude these items so marked. Set to 1 for returning owned games and 0 for non-owned games.",
                "default": null,
                "example": "1"
              },
              {
                "name": "rated",
                "type": "integer",
                "description": "Filter for whether an item has been rated. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "played",
                "type": "integer",
                "description": "Filter for whether an item has been played. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "comment",
                "type": "integer",
                "description": "Filter for items that have been commented. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "trade",
                "type": "integer",
                "description": "Filter for items marked for trade. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "want",
                "type": "integer",
                "description": "Filter for items wanted in trade. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "wishlist",
                "type": "integer",
                "description": "Filter for items on the wishlist. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "wishlistpriority",
                "type": "integer",
                "description": "Filter for wishlist priority. Returns only items of the specified priority.",
                "default": null,
                "example": "1"
              },
              {
                "name": "preordered",
                "type": "integer",
                "description": "Filter for pre-ordered games. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "wanttoplay",
                "type": "integer",
                "description": "Filter for items marked as wanting to play. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              },
              {
                "name": "wanttobuy",
                "type": "integer",
                "description": "Filter for ownership flag. Set to 0 to exclude these items so marked. Set to 1 to include only these items so marked.",
                "default": null,
                "example": "1"
              }
            ]
          }
        ]
      },
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\121\\\\thing_items_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\121\\threads_GET.py",
      "function_name": "threads",
      "api_description": "Request forum threads by thread id.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\122\\get_card_information_GET.py",
      "function_name": [],
      "api_description": {
        "title": "Yu-Gi-Oh! API Documentation",
        "endpoints": [
          {
            "name": "Get Card Information",
            "description": "Retrieve detailed information about Yu-Gi-Oh! cards using various filters.",
            "method": "GET",
            "url": "https://db.ygoprodeck.com/api/v7/cardinfo.php",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "name",
                "type": "string",
                "description": "The exact name of the card. Multiple names can be separated by |.",
                "default": null,
                "example": "Dark Magician|Blue-Eyes White Dragon"
              },
              {
                "name": "fname",
                "type": "string",
                "description": "A fuzzy search using a string.",
                "default": null,
                "example": "Magician"
              },
              {
                "name": "id",
                "type": "string",
                "description": "The 8-digit passcode of the card. Multiple IDs can be separated by commas.",
                "default": null,
                "example": "6983839,93221206"
              },
              {
                "name": "konami_id",
                "type": "string",
                "description": "The Konami ID of the card.",
                "default": null,
                "example": "12345678"
              },
              {
                "name": "type",
                "type": "string",
                "description": "The type of card to filter by. Multiple types can be separated by commas.",
                "default": null,
                "example": "Effect Monster,Spell Card"
              },
              {
                "name": "atk",
                "type": "string",
                "description": "Filter by ATK value. Use lt, lte, gt, gte for comparisons.",
                "default": null,
                "example": "lt2500"
              },
              {
                "name": "def",
                "type": "string",
                "description": "Filter by DEF value. Use lt, lte, gt, gte for comparisons.",
                "default": null,
                "example": "gte2000"
              },
              {
                "name": "level",
                "type": "string",
                "description": "Filter by card level/RANK. Use lt, lte, gt, gte for comparisons.",
                "default": null,
                "example": "lte8"
              },
              {
                "name": "race",
                "type": "string",
                "description": "Filter by the card race/type (e.g., Spellcaster, Warrior). Multiple races can be separated by commas.",
                "default": null,
                "example": "Spellcaster,Warrior"
              },
              {
                "name": "attribute",
                "type": "string",
                "description": "Filter by the card attribute. Multiple attributes can be separated by commas.",
                "default": null,
                "example": "DARK,EARTH"
              },
              {
                "name": "link",
                "type": "string",
                "description": "Filter the cards by Link value.",
                "default": null,
                "example": "2"
              },
              {
                "name": "linkmarker",
                "type": "string",
                "description": "Filter the cards by Link Marker value. Multiple values can be separated by commas.",
                "default": null,
                "example": "Top,Bottom"
              },
              {
                "name": "scale",
                "type": "string",
                "description": "Filter the cards by Pendulum Scale value.",
                "default": null,
                "example": "4"
              },
              {
                "name": "cardset",
                "type": "string",
                "description": "Filter the cards by card set.",
                "default": null,
                "example": "Metal Raiders"
              },
              {
                "name": "archetype",
                "type": "string",
                "description": "Filter the cards by archetype.",
                "default": null,
                "example": "Blue-Eyes"
              },
              {
                "name": "banlist",
                "type": "string",
                "description": "Filter the cards by banlist (TCG, OCG, Goat).",
                "default": null,
                "example": "TCG"
              },
              {
                "name": "sort",
                "type": "string",
                "description": "Sort the order of the cards (atk, def, name, type, level, id, new).",
                "default": null,
                "example": "atk"
              },
              {
                "name": "format",
                "type": "string",
                "description": "Sort the format of the cards (tcg, goat, ocg goat, speed duel, rush duel, duel links).",
                "default": null,
                "example": "tcg"
              },
              {
                "name": "misc",
                "type": "string",
                "description": "Pass 'yes' to show additional response info.",
                "default": null,
                "example": "yes"
              },
              {
                "name": "staple",
                "type": "string",
                "description": "Check if card is a staple.",
                "default": null,
                "example": "yes"
              },
              {
                "name": "has_effect",
                "type": "boolean",
                "description": "Check if a card has an effect or not.",
                "default": null,
                "example": "true"
              },
              {
                "name": "startdate",
                "type": "string",
                "description": "Filter based on cards' release date. Format as YYYY-mm-dd.",
                "default": null,
                "example": "2000-01-01"
              },
              {
                "name": "enddate",
                "type": "string",
                "description": "Filter based on cards' release date. Format as YYYY-mm-dd.",
                "default": null,
                "example": "2002-08-23"
              },
              {
                "name": "dateregion",
                "type": "string",
                "description": "Specify the date region as 'tcg' (default) or 'ocg'.",
                "default": null,
                "example": "tcg"
              }
            ]
          },
          {
            "name": "Random Card",
            "description": "Retrieve a random Yu-Gi-Oh! card.",
            "method": "GET",
            "url": "https://db.ygoprodeck.com/api/v7/randomcard.php",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "All Card Sets",
            "description": "Retrieve all current Yu-Gi-Oh! Card Set Names stored in the database.",
            "method": "GET",
            "url": "https://db.ygoprodeck.com/api/v7/cardsets.php",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Card Set Information",
            "description": "Retrieve information about a specific card set using its set code.",
            "method": "GET",
            "url": "https://db.ygoprodeck.com/api/v7/cardsetsinfo.php",
            "headers": [],
            "required_parameters": [
              {
                "name": "setcode",
                "type": "string",
                "description": "The code of the card set.",
                "default": null,
                "example": "SDY-046"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "All Card Archetypes",
            "description": "Retrieve all current Yu-Gi-Oh! Card Archetype Names stored in the database.",
            "method": "GET",
            "url": "https://db.ygoprodeck.com/api/v7/archetypes.php",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Check Database Version",
            "description": "Check the current version of the card database.",
            "method": "GET",
            "url": "https://db.ygoprodeck.com/api/v7/checkDBVer.php",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          }
        ]
      },
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\122\\\\get_card_information_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\123\\album_url_endpoint_GET.py",
      "function_name": "album_url_endpoint",
      "api_description": "Fetches details for a specific album based on the provided JioSaavn album link.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\123\\lyrics_endpoint_GET.py",
      "function_name": "lyrics_endpoint",
      "api_description": "Fetches lyrics for a specific song based on the provided JioSaavn song link or song ID.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\123\\playlist_url_endpoint_GET.py",
      "function_name": "playlist_url_endpoint",
      "api_description": "Fetches details for a specific playlist based on the provided JioSaavn playlist link.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\123\\song_url_endpoint_GET.py",
      "function_name": "song_url_endpoint",
      "api_description": "Fetches details for a specific song based on the provided JioSaavn song link.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\123\\universal_endpoint_GET.py",
      "function_name": "universal_endpoint",
      "api_description": "Fetches details for a song, album, or playlist based on the provided JioSaavn link or query.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\124\\get_book_by_id_GET.py",
      "function_name": "get_book_by_id",
      "api_description": "Retrieves a book by its ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\124\\get_character_by_id_GET.py",
      "function_name": "get_character_by_id",
      "api_description": "Retrieves a character by their ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\124\\get_house_by_id_GET.py",
      "function_name": "get_house_by_id",
      "api_description": "Retrieves a house by its ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\127\\get_multiple_quotes_GET.py",
      "function_name": "get_multiple_quotes",
      "api_description": "Retrieves a specified number of quotes from Breaking Bad.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\133\\get_birds_GET.py",
      "function_name": "get_birds",
      "api_description": "Retrieves random images of birds.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\133\\get_cats_GET.py",
      "function_name": "get_cats",
      "api_description": "Retrieves random images of cats.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\133\\get_shibes_GET.py",
      "function_name": "get_shibes",
      "api_description": "Retrieves random images of Shiba Inu dogs.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\134\\get_bear_image_GET.py",
      "function_name": [],
      "api_description": {
        "title": "Placebear API Documentation",
        "endpoints": [
          {
            "name": "Get Bear Image",
            "description": "Retrieves a placeholder image of a bear with specified dimensions.",
            "method": "GET",
            "url": "https://placebear.com/{width}/{height}",
            "headers": [],
            "required_parameters": [
              {
                "name": "width",
                "type": "integer",
                "description": "The width of the placeholder image in pixels.",
                "default": null,
                "example": 200
              },
              {
                "name": "height",
                "type": "integer",
                "description": "The height of the placeholder image in pixels.",
                "default": null,
                "example": 300
              }
            ],
            "optional_parameters": [
              {
                "name": "grayscale",
                "type": "boolean",
                "description": "If true, the image will be in grayscale.",
                "default": false,
                "example": true
              },
              {
                "name": "format",
                "type": "string",
                "description": "The format of the image. Can be 'jpg'.",
                "default": null,
                "example": "jpg"
              }
            ]
          }
        ]
      },
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\134\\\\get_bear_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\139\\get_multiple_quotes_GET.py",
      "function_name": "get_multiple_quotes",
      "api_description": "Retrieves an array of quotes from Lucifer based on the specified number.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\140\\avatars_GET.py",
      "function_name": "avatars",
      "api_description": "Retrieve the avatar of a Minecraft user by UUID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\140\\body_renders_GET.py",
      "function_name": "body_renders",
      "api_description": "Retrieve the body render of a Minecraft user by UUID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\140\\capes_GET.py",
      "function_name": "capes",
      "api_description": "Retrieve the cape of a Minecraft user by UUID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\140\\head_renders_GET.py",
      "function_name": "head_renders",
      "api_description": "Retrieve the head render of a Minecraft user by UUID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\140\\skins_GET.py",
      "function_name": "skins",
      "api_description": "Retrieve the skin of a Minecraft user by UUID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\150\\get_phishing_data_by_id_GET.py",
      "function_name": "get_phishing_data_by_id",
      "api_description": "Retrieves phishing data by a specific ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\151\\get_item_details_GET.py",
      "function_name": "get_item_details",
      "api_description": "Retrieves details of an item by its ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\152\\fetch_available_authors_GET.py",
      "function_name": "fetch_available_authors",
      "api_description": "Generate a JSON array of available authors in the ZenQuotes database.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\152\\fetch_quotes_by_author_GET.py",
      "function_name": "fetch_quotes_by_author",
      "api_description": "Generate a JSON array of quotes from a specific author.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\152\\fetch_quote_image_by_author_GET.py",
      "function_name": "fetch_quote_image_by_author",
      "api_description": "Generate a quote image from a specific author.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\153\\get_specific_anime_fact_GET.py",
      "function_name": "get_specific_anime_fact",
      "api_description": "Retrieves a specific fact related to a specific anime.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\158\\graphical_api_GET.py",
      "function_name": "graphical_api",
      "api_description": "Displays the forecast diagram as seen on the 7Timer! website.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\159\\latest_GET.py",
      "function_name": "latest",
      "api_description": "Retrieve the latest phone specifications.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\159\\\\latest_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\159\\list_brands_GET.py",
      "function_name": "list_brands",
      "api_description": "Retrieve a list of phone brands.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\159\\\\list_brands_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\159\\list_phones_GET.py",
      "function_name": "list_phones",
      "api_description": "Retrieve a list of phones for a specific brand.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\159\\phone_specifications_GET.py",
      "function_name": "phone_specifications",
      "api_description": "Retrieve specifications for a specific phone.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\159\\\\phone_specifications_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\159\\top_by_fans_GET.py",
      "function_name": "top_by_fans",
      "api_description": "Retrieve the top phones by fans.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\159\\\\top_by_fans_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\159\\top_by_interest_GET.py",
      "function_name": "top_by_interest",
      "api_description": "Retrieve the top phones by interest.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\159\\\\top_by_interest_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\161\\ai_meme_POST.py",
      "function_name": "ai_meme",
      "api_description": "Generates a fresh meme from scratch using Imgflip's deep neural network trained on millions of public memes.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\161\\automeme_POST.py",
      "function_name": "automeme",
      "api_description": "Automatically caption one of the top 2,048 memes based only on the input text.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\161\\caption_image_POST.py",
      "function_name": "caption_image",
      "api_description": "Add a caption to an Imgflip meme template.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\161\\search_memes_POST.py",
      "function_name": "search_memes",
      "api_description": "Search for meme templates that can be captioned with the /caption_image endpoint.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\162\\get_pok\u00e9mon_type_by_id_GET.py",
      "function_name": "get_pok\u00e9mon_type_by_id",
      "api_description": "Retrieves detailed information about a specific Pok\u00e9mon type by its ID.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\162\\\\get_pok\u00e9mon_type_by_id_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\163\\get_multiple_memes_from_subreddit_GET.py",
      "function_name": "get_multiple_memes_from_subreddit",
      "api_description": "Fetches a specified number of memes from a specified subreddit.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\163\\get_multiple_memes_GET.py",
      "function_name": "get_multiple_memes",
      "api_description": "Fetches a specified number of random memes.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\164\\generate_random_strings_GET.py",
      "function_name": "generate_random_strings",
      "api_description": "Generates a specified number of random strings of a specified length.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\165\\get_a_random_pun_GET.py",
      "function_name": "get_a_random_pun",
      "api_description": "Retrieve a random pun from our collection.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\165\\get_puns_by_pagination_GET.py",
      "function_name": "get_puns_by_pagination",
      "api_description": "Retrieve puns by providing a page number. Fixed to 10 puns per page.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\165\\get_puns_by_searching_GET.py",
      "function_name": "get_puns_by_searching",
      "api_description": "Retrieve puns by searching with keywords.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\165\\get_pun_by_id_GET.py",
      "function_name": "get_pun_by_id",
      "api_description": "Retrieve a specific pun by providing its unique identifier (ID).",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\165\\get_pun_meme_GET.py",
      "function_name": "get_pun_meme",
      "api_description": "Retrieve a random pun meme.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\19\\historic_data_for_a_state_or_territory_GET.py",
      "function_name": "historic_data_for_a_state_or_territory",
      "api_description": "Retrieve all historic data for a single state.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\19\\simplified_historic_data_for_a_state_or_territory_GET.py",
      "function_name": "simplified_historic_data_for_a_state_or_territory",
      "api_description": "Retrieve simplified historic data for a single state.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\19\\single_day_of_data_for_a_state_or_territory_GET.py",
      "function_name": "single_day_of_data_for_a_state_or_territory",
      "api_description": "Retrieve data for a single day for a state or territory.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\19\\single_state_metadata_GET.py",
      "function_name": "single_state_metadata",
      "api_description": "Retrieve basic information about a single state, including notes about methodology and data sources.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\2\\get_postal_code_information_GET.py",
      "function_name": "get_postal_code_information",
      "api_description": "Retrieves information about a specific postal code.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\2\\\\get_postal_code_information_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\20\\generate_placeholder_text_GET.py",
      "function_name": "generate_placeholder_text",
      "api_description": "Generates placeholder text based on specified parameters.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\22\\get_author_by_slug_GET.py",
      "function_name": "get_author_by_slug",
      "api_description": "Get a single author by slug. This method can be used to get author details such as bio, website link, and profile image.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\get_author_by_slug_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\get_quote_by_id_GET.py",
      "function_name": "get_quote_by_id",
      "api_description": "Get a quote by its ID.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\get_quote_by_id_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\get_random_quotes_GET.py",
      "function_name": "get_random_quotes",
      "api_description": "Get one or more random quotes from the database. This method supports several filters that can be used to get random quotes with specific properties.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\get_random_quotes_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\get_random_quote_GET.py",
      "function_name": "get_random_quote",
      "api_description": "Returns a single random quote from the database. This method is deprecated in favor of Get Random Quotes.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\get_random_quote_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\list_authors_GET.py",
      "function_name": "list_authors",
      "api_description": "Get all authors matching the given query. This endpoint can be used to list authors, with several options for sorting and filtering.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\list_authors_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\list_quotes_GET.py",
      "function_name": "list_quotes",
      "api_description": "Get all quotes matching a given query. By default, this will return a paginated list of all quotes, sorted by _id.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\list_quotes_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\list_tags_GET.py",
      "function_name": "list_tags",
      "api_description": "Get a list of all tags.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\22\\\\list_tags_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\22\\search_authors_GET.py",
      "function_name": "search_authors",
      "api_description": "Search for authors by name. It is designed to power a search bar for authors that displays autocomplete suggestions as the user types.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\22\\search_quotes_GET.py",
      "function_name": "search_quotes",
      "api_description": "Search for quotes by keywords, content, and/or author name. This method is powered by Atlas Search and is designed to power a search bar UI.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\23\\show_a_connection_GET.py",
      "function_name": "show_a_connection",
      "api_description": "Provides details about a specific connection.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\27\\check_if_a_number_is_even_GET.py",
      "function_name": "check_if_a_number_is_even",
      "api_description": "Returns whether a given number is even.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\30\\get_random_quote_GET.py",
      "function_name": "get_random_quote",
      "api_description": "Retrieves a random quote from the Quotes on Design database.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\31\\get_item_GET.py",
      "function_name": "get_item",
      "api_description": "Retrieves a specific item (story, comment, job, Ask HN, or poll) by its unique ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\35\\get_drupalci_job_data_GET.py",
      "function_name": "get_drupalci_job_data",
      "api_description": "Retrieve data for a specific DrupalCI job.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\35\\get_file_data_GET.py",
      "function_name": "get_file_data",
      "api_description": "Retrieve data for a specific file.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\35\\get_node_data_GET.py",
      "function_name": "get_node_data",
      "api_description": "Retrieve data for a specific node.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\35\\get_user_data_GET.py",
      "function_name": "get_user_data",
      "api_description": "Retrieve data for a specific user.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\36\\day_summary_GET.py",
      "function_name": "day_summary",
      "api_description": "Retorna resumo di\u00e1rio de negocia\u00e7\u00f5es realizadas.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\36\\trades_GET.py",
      "function_name": [],
      "api_description": {
        "title": "Mercado Bitcoin API Documentation",
        "endpoints": [
          {
            "name": "Ticker",
            "description": "Retorna informa\u00e7\u00f5es com o resumo das \u00faltimas 24 horas de negocia\u00e7\u00f5es.",
            "method": "GET",
            "url": "https://www.mercadobitcoin.net/api/<coin>/ticker/",
            "headers": [],
            "required_parameters": [
              {
                "name": "coin",
                "type": "string",
                "description": "Acr\u00f4nimo da moeda digital",
                "default": null,
                "example": "BTC"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Orderbook",
            "description": "Livro de ofertas \u00e9 composto por duas listas: (1) uma lista com as ofertas de compras ordenadas pelo maior valor; (2) uma lista com as ofertas de venda ordenadas pelo menor valor.",
            "method": "GET",
            "url": "https://www.mercadobitcoin.net/api/<coin>/orderbook/",
            "headers": [],
            "required_parameters": [
              {
                "name": "coin",
                "type": "string",
                "description": "Acr\u00f4nimo da moeda digital",
                "default": null,
                "example": "BTC"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Trades",
            "description": "Hist\u00f3rico de negocia\u00e7\u00f5es realizadas.",
            "method": "GET",
            "url": "https://www.mercadobitcoin.net/api/<coin>/trades/",
            "headers": [],
            "required_parameters": [
              {
                "name": "coin",
                "type": "string",
                "description": "Acr\u00f4nimo da moeda digital",
                "default": null,
                "example": "BTC"
              }
            ],
            "optional_parameters": [
              {
                "name": "tid",
                "type": "integer",
                "description": "Retorna at\u00e9 1000 negocia\u00e7\u00f5es a partir do identificador da negocia\u00e7\u00e3o informado.",
                "default": null,
                "example": 5700
              },
              {
                "name": "since",
                "type": "integer",
                "description": "Retorna at\u00e9 1000 negocia\u00e7\u00f5es a partir do identificador da negocia\u00e7\u00e3o informado.",
                "default": null,
                "example": 5700
              },
              {
                "name": "from",
                "type": "integer",
                "description": "Retorna at\u00e9 1000 negocia\u00e7\u00f5es a partir da data informada.",
                "default": null,
                "example": 1501871369
              },
              {
                "name": "to",
                "type": "integer",
                "description": "Retorna at\u00e9 1000 negocia\u00e7\u00f5es entre o intervalo de timestamp informado.",
                "default": null,
                "example": 1501891200
              }
            ]
          },
          {
            "name": "Day Summary",
            "description": "Retorna resumo di\u00e1rio de negocia\u00e7\u00f5es realizadas.",
            "method": "GET",
            "url": "https://www.mercadobitcoin.net/api/<coin>/day-summary/<year>/<month>/<day>/",
            "headers": [],
            "required_parameters": [
              {
                "name": "coin",
                "type": "string",
                "description": "Acr\u00f4nimo da moeda digital",
                "default": null,
                "example": "BTC"
              },
              {
                "name": "year",
                "type": "integer",
                "description": "Ano referente ao dia do ano requisitado.",
                "default": null,
                "example": 2013
              },
              {
                "name": "month",
                "type": "integer",
                "description": "M\u00eas referente ao dia do ano requisitado.",
                "default": null,
                "example": 6
              },
              {
                "name": "day",
                "type": "integer",
                "description": "Dia do m\u00eas referente ao dia do ano requisitado.",
                "default": null,
                "example": 20
              }
            ],
            "optional_parameters": []
          }
        ]
      },
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\36\\\\trades_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\39\\get_notice_details_GET.py",
      "function_name": "get_notice_details",
      "api_description": "Get extended set of data for a notice.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\get_notice_source_data_GET.py",
      "function_name": "get_notice_source_data",
      "api_description": "Get source data for a notice - as fetched by a scraper.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\get_section_details_GET.py",
      "function_name": "get_section_details",
      "api_description": "Get extended set of data for a section.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\get_section_source_data_GET.py",
      "function_name": "get_section_source_data",
      "api_description": "Get source data for a section - as fetched by a scraper.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\get_tender_details_GET.py",
      "function_name": "get_tender_details",
      "api_description": "Get extended set of data for a tender.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\get_tender_source_data_GET.py",
      "function_name": "get_tender_source_data",
      "api_description": "Get source data for a tender - as fetched by a scraper.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\list_notice_sections_GET.py",
      "function_name": "list_notice_sections",
      "api_description": "List sections published for a notice.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\list_tender_documents_GET.py",
      "function_name": "list_tender_documents",
      "api_description": "List documents published for a tender.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\39\\list_tender_notices_GET.py",
      "function_name": "list_tender_notices",
      "api_description": "List notices published for a tender.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\42\\convert_easting_and_northing_to_latitude_and_longitude_GET.py",
      "function_name": "convert_easting_and_northing_to_latitude_and_longitude",
      "api_description": "Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\43\\convert_easting_and_northing_to_latitude_and_longitude_GET.py",
      "function_name": "convert_easting_and_northing_to_latitude_and_longitude",
      "api_description": "Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\50\\get_blurred_image_GET.py",
      "function_name": "get_blurred_image",
      "api_description": "Retrieve a blurred image with specified width and height.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\50\\\\get_blurred_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\50\\get_grayscale_image_GET.py",
      "function_name": "get_grayscale_image",
      "api_description": "Retrieve a grayscale image with specified width and height.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\50\\\\get_grayscale_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\50\\get_random_image_GET.py",
      "function_name": "get_random_image",
      "api_description": "Retrieve a random image with specified width and height.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\50\\\\get_random_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\50\\get_specific_image_GET.py",
      "function_name": "get_specific_image",
      "api_description": "Retrieve a specific image by its ID with specified width and height.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\50\\\\get_specific_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\50\\get_square_image_GET.py",
      "function_name": "get_square_image",
      "api_description": "Retrieve a square image with specified size.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\50\\\\get_square_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\50\\get_static_random_image_GET.py",
      "function_name": "get_static_random_image",
      "api_description": "Retrieve the same random image every time based on a seed with specified width and height.",
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\50\\\\get_static_random_image_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\53\\steam_account_lookup_GET.py",
      "function_name": "steam_account_lookup",
      "api_description": "Fetches data for a Steam account by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_ailment_GET.py",
      "function_name": "get_a_specific_ailment",
      "api_description": "Retrieves a specific ailment by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_armor_piece_GET.py",
      "function_name": "get_a_specific_armor_piece",
      "api_description": "Retrieves a specific armor piece by ID or slug.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_armor_set_GET.py",
      "function_name": "get_a_specific_armor_set",
      "api_description": "Retrieves a specific armor set by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_charm_GET.py",
      "function_name": "get_a_specific_charm",
      "api_description": "Retrieves a specific charm by ID or slug.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_decoration_GET.py",
      "function_name": "get_a_specific_decoration",
      "api_description": "Retrieves a specific decoration by ID or slug.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_event_GET.py",
      "function_name": "get_a_specific_event",
      "api_description": "Retrieves a specific event by ID.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_item_GET.py",
      "function_name": "get_a_specific_item",
      "api_description": "Retrieves a specific item by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_location_GET.py",
      "function_name": "get_a_specific_location",
      "api_description": "Retrieves a specific location by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_monster_GET.py",
      "function_name": "get_a_specific_monster",
      "api_description": "Retrieves a specific monster by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_motion_value_GET.py",
      "function_name": "get_a_specific_motion_value",
      "api_description": "Retrieves a specific motion value by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_skill_GET.py",
      "function_name": "get_a_specific_skill",
      "api_description": "Retrieves a specific skill by ID or slug.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\57\\get_a_specific_weapon_GET.py",
      "function_name": "get_a_specific_weapon",
      "api_description": "Retrieves a specific weapon by ID or slug.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_auroracoin_exchange_rate_GET.py",
      "function_name": "get_auroracoin_exchange_rate",
      "api_description": "Get current Auroracoin exchange rate and various statistics for the past day.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_auroracoin_exchange_rate_history_GET.py",
      "function_name": "get_auroracoin_exchange_rate_history",
      "api_description": "Get daily exchange rate history for the past year.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_auroracoin_order_book_GET.py",
      "function_name": "get_auroracoin_order_book",
      "api_description": "Get list of current sale and purchase offers on ISX.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_auroracoin_transactions_GET.py",
      "function_name": "get_auroracoin_transactions",
      "api_description": "Get history of Auroracoin transactions on ISX.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_bicycle_counter_status_GET.py",
      "function_name": "get_bicycle_counter_status",
      "api_description": "Get current status of bicycle counters in Iceland, currently only one located by Sudurlandsbraut in Reykjavik.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_carpooling_drivers_GET.py",
      "function_name": "get_carpooling_drivers",
      "api_description": "Get a list of drivers requesting passengers, sorted by departure date.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_carpooling_passengers_GET.py",
      "function_name": "get_carpooling_passengers",
      "api_description": "Get a list of passengers requesting rides, sorted by preferred departure date.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_currency_data_GET.py",
      "function_name": "get_currency_data",
      "api_description": "Get currency data in relation to ISK.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_earthquake_data_GET.py",
      "function_name": "get_earthquake_data",
      "api_description": "Get earthquake monitoring data for the last 48 hours.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_eurojackpot_numbers_GET.py",
      "function_name": "get_eurojackpot_numbers",
      "api_description": "Get the most recent numbers for EuroJackpot.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_hospital_status_GET.py",
      "function_name": "get_hospital_status",
      "api_description": "Get the current status of the National University Hospital of Iceland.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_icelandic_lottery_numbers_GET.py",
      "function_name": "get_icelandic_lottery_numbers",
      "api_description": "Get the most recent numbers for the Icelandic lottery.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_international_flights_GET.py",
      "function_name": "get_international_flights",
      "api_description": "Get a list of all international flights departing and arriving at Keflavik Airport today.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_particulates_status_GET.py",
      "function_name": "get_particulates_status",
      "api_description": "Get current status of particulates in Reykjavik City.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_petrol_stations_GET.py",
      "function_name": "get_petrol_stations",
      "api_description": "Lookup locations and gas prices for petrol stations in Iceland.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_sar_school_courses_GET.py",
      "function_name": "get_sar_school_courses",
      "api_description": "Get a list of all courses scheduled by the Search and Rescue school for training of SAR Squad members.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_sports_events_GET.py",
      "function_name": "get_sports_events",
      "api_description": "Get events for Icelandic football and/or handball.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_tv_schedules_GET.py",
      "function_name": "get_tv_schedules",
      "api_description": "Get schedules for Icelandic TV stations.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_vikingalotto_numbers_GET.py",
      "function_name": "get_vikingalotto_numbers",
      "api_description": "Get the most recent numbers for Vikingalotto.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\get_weather_information_GET.py",
      "function_name": "get_weather_information",
      "api_description": "Get weather information for Iceland.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\list_of_concerts_in_iceland_GET.py",
      "function_name": "list_of_concerts_in_iceland",
      "api_description": "Get a list of all the concerts in Iceland sorted by date.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\lookup_icelandic_addresses_GET.py",
      "function_name": "lookup_icelandic_addresses",
      "api_description": "Lookup addresses in Iceland through the Icelandic Post API.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\real_time_bus_locations_GET.py",
      "function_name": "real_time_bus_locations",
      "api_description": "Get real-time location of buses. Results are only shown for active buses.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\search_icelandic_company_registry_GET.py",
      "function_name": [],
      "api_description": {
        "title": "APIs.is API Documentation",
        "endpoints": [
          {
            "name": "Lookup Icelandic Addresses",
            "description": "Lookup addresses in Iceland through the Icelandic Post API.",
            "method": "GET",
            "url": "http://apis.is/address",
            "headers": [],
            "required_parameters": [
              {
                "name": "address",
                "type": "string",
                "description": "Valid address",
                "default": null,
                "example": "laugavegur 1"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Real-time Bus Locations",
            "description": "Get real-time location of buses. Results are only shown for active buses.",
            "method": "GET",
            "url": "http://apis.is/bus/realtime",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "busses",
                "type": "string",
                "description": "Comma separated list of bus numbers. If not declared, returns location of all available buses.",
                "default": null,
                "example": "1,5"
              }
            ]
          },
          {
            "name": "Search Icelandic Vehicle Registry",
            "description": "Search the Icelandic vehicle registry.",
            "method": "GET",
            "url": "http://apis.is/car",
            "headers": [],
            "required_parameters": [
              {
                "name": "number",
                "type": "string",
                "description": "Registry number",
                "default": null,
                "example": "aa031"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Search Icelandic Company Registry",
            "description": "Search the Icelandic company registry. At least one parameter is required.",
            "method": "GET",
            "url": "http://apis.is/company",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "name",
                "type": "string",
                "description": "Company name",
                "default": null,
                "example": "blendin"
              },
              {
                "name": "address",
                "type": "string",
                "description": "Company's address",
                "default": null,
                "example": "Hamrahl\u00ed\u00f0 9 105 Reykjav\u00edk"
              },
              {
                "name": "socialnumber",
                "type": "string",
                "description": "Company's social security number / ID number",
                "default": null,
                "example": "6304141720"
              },
              {
                "name": "vsknr",
                "type": "string",
                "description": "Company's VAT-number (VSK in Icelandic)",
                "default": null,
                "example": "123456"
              }
            ]
          },
          {
            "name": "List of Concerts in Iceland",
            "description": "Get a list of all the concerts in Iceland sorted by date.",
            "method": "GET",
            "url": "http://apis.is/concerts",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Currency Data",
            "description": "Get currency data in relation to ISK.",
            "method": "GET",
            "url": "http://apis.is/currency/:source",
            "headers": [],
            "required_parameters": [
              {
                "name": "source",
                "type": "string",
                "description": "Which source to use (m5|arion|lb)",
                "default": null,
                "example": "m5"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Get Bicycle Counter Status",
            "description": "Get current status of bicycle counters in Iceland, currently only one located by Sudurlandsbraut in Reykjavik.",
            "method": "GET",
            "url": "http://apis.is/cyclecounter",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Earthquake Data",
            "description": "Get earthquake monitoring data for the last 48 hours.",
            "method": "GET",
            "url": "http://apis.is/earthquake/is",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get International Flights",
            "description": "Get a list of all international flights departing and arriving at Keflavik Airport today.",
            "method": "GET",
            "url": "http://apis.is/flight",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "language",
                "type": "string",
                "description": "'en' or 'is'",
                "default": "en",
                "example": "en"
              },
              {
                "name": "type",
                "type": "string",
                "description": "'departures' or 'arrivals'",
                "default": "departures",
                "example": "departures"
              }
            ]
          },
          {
            "name": "Get Hospital Status",
            "description": "Get the current status of the National University Hospital of Iceland.",
            "method": "GET",
            "url": "http://apis.is/hospital",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Icelandic Lottery Numbers",
            "description": "Get the most recent numbers for the Icelandic lottery.",
            "method": "GET",
            "url": "http://apis.is/lottery",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Vikingalotto Numbers",
            "description": "Get the most recent numbers for Vikingalotto.",
            "method": "GET",
            "url": "http://apis.is/lottery/vikingalotto",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get EuroJackpot Numbers",
            "description": "Get the most recent numbers for EuroJackpot.",
            "method": "GET",
            "url": "http://apis.is/lottery/eurojackpot",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Particulates Status",
            "description": "Get current status of particulates in Reykjavik City.",
            "method": "GET",
            "url": "http://apis.is/particulates",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Carpooling Drivers",
            "description": "Get a list of drivers requesting passengers, sorted by departure date.",
            "method": "GET",
            "url": "http://apis.is/rides/samferda-drivers/",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Carpooling Passengers",
            "description": "Get a list of passengers requesting rides, sorted by preferred departure date.",
            "method": "GET",
            "url": "http://apis.is/rides/samferda-passengers/",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get SAR School Courses",
            "description": "Get a list of all courses scheduled by the Search and Rescue school for training of SAR Squad members.",
            "method": "GET",
            "url": "http://apis.is/sarschool",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Sports Events",
            "description": "Get events for Icelandic football and/or handball.",
            "method": "GET",
            "url": "http://apis.is/sports/:sport",
            "headers": [],
            "required_parameters": [
              {
                "name": "sport",
                "type": "string",
                "description": "Which sport events to get (football|handball)",
                "default": null,
                "example": "football"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Get TV Schedules",
            "description": "Get schedules for Icelandic TV stations.",
            "method": "GET",
            "url": "http://apis.is/tv/:channel",
            "headers": [],
            "required_parameters": [
              {
                "name": "channel",
                "type": "string",
                "description": "Which channel's schedule to get",
                "default": null,
                "example": "ruv"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "Get Weather Information",
            "description": "Get weather information for Iceland.",
            "method": "GET",
            "url": "http://apis.is/weather/:type/:lang",
            "headers": [],
            "required_parameters": [
              {
                "name": "type",
                "type": "string",
                "description": "Type of information to get (forecasts|observations|texts)",
                "default": null,
                "example": "forecasts"
              },
              {
                "name": "lang",
                "type": "string",
                "description": "Language of output ('en' or 'is'), defaults to 'is'",
                "default": "is",
                "example": "en"
              }
            ],
            "optional_parameters": [
              {
                "name": "stations",
                "type": "string",
                "description": "List of station numbers separated by commas(,) or semicolons(;).",
                "default": null,
                "example": "1,422"
              },
              {
                "name": "time",
                "type": "string",
                "description": "1h (default) = Fetch data from automatic weather stations that are updated on the hour. 3h = Only fetch mixed data from manned and automatic weather stations that is updated every 3 hours.",
                "default": "1h",
                "example": "1h"
              },
              {
                "name": "anytime",
                "type": "string",
                "description": "0 (default) = an error will be returned if current data is not available. 1 = last available numbers will be displayed, regardless of date.",
                "default": "0",
                "example": "0"
              },
              {
                "name": "types",
                "type": "string",
                "description": "List of types separated by commas(,) or semicolons(;).",
                "default": null,
                "example": "5,6"
              }
            ]
          },
          {
            "name": "Search Icelandic Horse Database",
            "description": "Search the Icelandic horse database Worldfengur. At least one of the following is required: id, name and origin, or microchip.",
            "method": "GET",
            "url": "http://apis.is/horses",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "id",
                "type": "string",
                "description": "Public ID",
                "default": null,
                "example": "IS1987187700"
              },
              {
                "name": "name",
                "type": "string",
                "description": "Name",
                "default": null,
                "example": "Oddur fr\u00e1 Selfossi"
              },
              {
                "name": "origin",
                "type": "string",
                "description": "Place of origin",
                "default": null,
                "example": "Selfoss"
              },
              {
                "name": "microchip",
                "type": "string",
                "description": "Microchip number",
                "default": null,
                "example": "1234567890"
              }
            ]
          },
          {
            "name": "Get Petrol Stations",
            "description": "Lookup locations and gas prices for petrol stations in Iceland.",
            "method": "GET",
            "url": "http://apis.is/petrol",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Auroracoin Exchange Rate",
            "description": "Get current Auroracoin exchange rate and various statistics for the past day.",
            "method": "GET",
            "url": "http://apis.is/aur",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Auroracoin Exchange Rate History",
            "description": "Get daily exchange rate history for the past year.",
            "method": "GET",
            "url": "http://apis.is/aur/history",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Auroracoin Transactions",
            "description": "Get history of Auroracoin transactions on ISX.",
            "method": "GET",
            "url": "http://apis.is/aur/transactions",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Get Auroracoin Order Book",
            "description": "Get list of current sale and purchase offers on ISX.",
            "method": "GET",
            "url": "http://apis.is/aur/order-book",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "Search Icelandic Ship Registry",
            "description": "Search the Icelandic ship registry.",
            "method": "GET",
            "url": "http://apis.is/ship",
            "headers": [],
            "required_parameters": [
              {
                "name": "search",
                "type": "string",
                "description": "Ship name, regional code (e.g., RE-100) or the registry's registration number",
                "default": null,
                "example": "engey"
              }
            ],
            "optional_parameters": []
          }
        ]
      },
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\search_icelandic_horse_database_GET.py",
      "function_name": "search_icelandic_horse_database",
      "api_description": "Search the Icelandic horse database Worldfengur. At least one of the following is required: id, name and origin, or microchip.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\search_icelandic_ship_registry_GET.py",
      "function_name": "search_icelandic_ship_registry",
      "api_description": "Search the Icelandic ship registry.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\59\\search_icelandic_vehicle_registry_GET.py",
      "function_name": "search_icelandic_vehicle_registry",
      "api_description": "Search the Icelandic vehicle registry.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\64\\download_malware_sample_GET.py",
      "function_name": "download_malware_sample",
      "api_description": "Download a copy of a specific payload (malware sample) using its SHA256 hash.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\68\\get_person_GET.py",
      "function_name": "get_person",
      "api_description": "Retrieves a person by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\68\\get_planet_GET.py",
      "function_name": "get_planet",
      "api_description": "Retrieves a planet by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\68\\get_starship_GET.py",
      "function_name": "get_starship",
      "api_description": "Retrieves a starship by ID.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\71\\show_package_GET.py",
      "function_name": "show_package",
      "api_description": "Retrieves a full JSON representation of a dataset, resource, or other object by ID.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\72\\currencies_GET.py",
      "function_name": "currencies",
      "api_description": "Look up all currencies supported by the marketstack API.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\dividends_data_GET.py",
      "function_name": "dividends_data",
      "api_description": "Look up information about the stock dividend for different symbols.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\end_of_day_data_GET.py",
      "function_name": "end_of_day_data",
      "api_description": "Obtain end-of-day data for one or multiple stock tickers.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\exchanges_GET.py",
      "function_name": "exchanges",
      "api_description": "Look up information about any of the 70+ stock exchanges supported by marketstack.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\intraday_data_GET.py",
      "function_name": "intraday_data",
      "api_description": "Obtain intraday data with data intervals as short as one minute.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\market_indices_GET.py",
      "function_name": "market_indices",
      "api_description": "Deliver end-of-day data for 750+ of the world's major indices, including the S&P 500 Index, the Dow Jones Industrial Average Index as well as the NASDAQ Composite Index.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\splits_data_GET.py",
      "function_name": "splits_data",
      "api_description": "Look up information about the stock splits factor for different symbols.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\tickers_GET.py",
      "function_name": "tickers",
      "api_description": "Look up information about one or multiple stock ticker symbols as well as obtain end-of-day, real-time and intraday market data for single tickers.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\72\\timezones_GET.py",
      "function_name": "timezones",
      "api_description": "Look up information about all supported timezones.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\73\\get_article_content_GET.py",
      "function_name": "get_article_content",
      "api_description": "Get the contents of an article on English Wikipedia in HTML.",
      "status": "fail",
      "error_type": "code_error"
    },
    {
      "path": "extractor\\apidocs\\73\\query_GET.py",
      "function_name": "query",
      "api_description": "Fetch data from and about MediaWiki.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\78\\get_poems_by_line_count_GET.py",
      "function_name": "get_poems_by_line_count",
      "api_description": "Retrieves poems with a specific number of lines.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\78\\get_random_poems_GET.py",
      "function_name": "get_random_poems",
      "api_description": "Retrieves a specified number of random poems.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\79\\get_latest_memes_GET.py",
      "function_name": "get_latest_memes",
      "api_description": "Shows n latest memes.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\79\\get_memes_with_pagination_GET.py",
      "function_name": "get_memes_with_pagination",
      "api_description": "Shows n memes with pagination.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\79\\get_random_memes_GET.py",
      "function_name": "get_random_memes",
      "api_description": "Shows randomly n memes.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\8\\generate_chart_GET.py",
      "function_name": "generate_chart",
      "api_description": "Generates a chart image based on the specified parameters.",
      "status": null,
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\80\\series_of_latest_exchange_rates_of_a_currency_GET.py",
      "function_name": "series_of_latest_exchange_rates_of_a_currency",
      "api_description": "Retrieve a series of the latest exchange rates of a specified currency from a specified table type.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\80\\series_of_latest_gold_prices_GET.py",
      "function_name": "series_of_latest_gold_prices",
      "api_description": "Retrieve a series of the latest gold price quotations.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\80\\series_of_latest_tables_of_exchange_rates_GET.py",
      "function_name": "series_of_latest_tables_of_exchange_rates",
      "api_description": "Retrieve a series of the latest tables of exchange rates of a specified type.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_chapter_GET.py",
      "function_name": "get_chapter",
      "api_description": "Get a specific chapter of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_chapter__minified__GET.py",
      "function_name": "get_chapter__minified_",
      "api_description": "Get a specific chapter of the Quran in minified format for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_juz_GET.py",
      "function_name": "get_juz",
      "api_description": "Get a specific Juz of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_manzil_GET.py",
      "function_name": "get_manzil",
      "api_description": "Get a specific Manzil of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_maqra_GET.py",
      "function_name": "get_maqra",
      "api_description": "Get a specific Maqra of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_page_GET.py",
      "function_name": "get_page",
      "api_description": "Get a specific page of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_ruku_GET.py",
      "function_name": "get_ruku",
      "api_description": "Get a specific Ruku of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\83\\get_verse_GET.py",
      "function_name": "get_verse",
      "api_description": "Get a specific verse of a chapter of the Quran for a specific edition.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\88\\\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435_\u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a_\u043d\u0430_\u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439_\u0434\u0435\u043d\u044c_GET.py",
      "function_name": "\u950c\u82af\u8c22\u890d\u8914\u68b0\u85aa\u61c8\u68b0_\u6cfb\u82af\u890c\u61c8\u8909\u82af\u80c1\u82af\u6cfb_\u85aa\u90aa_\u87f9\u90aa\u5199\u90aa\u85aa\u85aa\u8918\u6cc4_\u5199\u68b0\u85aa\u891c",
      "api_description": {
        "title": "\u0411\u0430\u043d\u043a \u0420\u043e\u0441\u0441\u0438\u0438 API Documentation",
        "endpoints": [
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_daily.asp",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "date_req",
                "type": "string",
                "description": "\u0414\u0430\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u0430\u0442\u0443.",
                "default": null,
                "example": "02/03/2002"
              }
            ]
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0421\u0428\u0410",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0421\u0428\u0410 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_dynamic.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "02/03/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "14/03/2001"
              },
              {
                "name": "VAL_NM_RQ",
                "type": "string",
                "description": "\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432\u0430\u043b\u044e\u0442\u044b.",
                "default": null,
                "example": "R01235"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0441\u0442\u0430\u0442\u043a\u0430\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u0441\u0447\u0435\u0442\u0430\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0441\u0442\u0430\u0442\u043a\u0430\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u0441\u0447\u0435\u0442\u0430\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_ostat.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/06/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "05/06/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u043b\u043b\u043e\u0432",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u043b\u043b\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_metall.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/07/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "13/07/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043c\u0435\u0436\u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0440\u044b\u043d\u043a\u0430",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043c\u0435\u0436\u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0440\u044b\u043d\u043a\u0430 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_mkr.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/07/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "13/07/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043f\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u043c \u0440\u044b\u043d\u043a\u0435",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043f\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u043c \u0440\u044b\u043d\u043a\u0435 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_depo.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/07/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "13/07/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_News.asp",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u043e\u0434\u0430\u043c BIC",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u043e\u0434\u0430\u043c BIC (9 \u0437\u043d\u0430\u043a\u043e\u0432).",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_bic.asp",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "bic",
                "type": "string",
                "description": "\u041a\u043e\u0434 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 (9 \u0437\u043d\u0430\u043a\u043e\u0432).",
                "default": null,
                "example": "044525774"
              },
              {
                "name": "name",
                "type": "string",
                "description": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 (\u0447\u0430\u0441\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f) \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438.",
                "default": null,
                "example": "\u0410\u0412\u0422\u041e"
              }
            ]
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u00ab\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u043f\u00bb",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u00ab\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u043f\u00bb \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_swap.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/12/2002"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "06/12/2002"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043e\u0442\u043f\u0443\u0441\u043a\u043d\u044b\u0445 \u0446\u0435\u043d \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043c\u043e\u043d\u0435\u0442\u044b",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043e\u0442\u043f\u0443\u0441\u043a\u043d\u044b\u0445 \u0446\u0435\u043d \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043c\u043e\u043d\u0435\u0442\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XMLCoinsBase.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/12/2005"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "06/12/2005"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0441 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435\u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c \u0440\u044b\u043d\u043a\u0435",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0441 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435\u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c \u0440\u044b\u043d\u043a\u0435.",
            "method": "GET",
            "url": "http://www.cbr.ru/ref/blacklist/BlackList.xml",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          }
        ]
      },
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\88\\\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435_\u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439_\u0441\u0435\u0440\u0432\u0435\u0440\u0430_GET.py",
      "function_name": "\u950c\u82af\u8c22\u890d\u8914\u68b0\u85aa\u61c8\u68b0_\u85aa\u82af\u80c1\u82af\u890b\u890c\u68b0\u6cc4_\u890b\u68b0\u8909\u80c1\u68b0\u8909\u90aa",
      "api_description": {
        "title": "\u0411\u0430\u043d\u043a \u0420\u043e\u0441\u0441\u0438\u0438 API Documentation",
        "endpoints": [
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_daily.asp",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "date_req",
                "type": "string",
                "description": "\u0414\u0430\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u0430\u0442\u0443.",
                "default": null,
                "example": "02/03/2002"
              }
            ]
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0421\u0428\u0410",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0421\u0428\u0410 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_dynamic.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "02/03/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "14/03/2001"
              },
              {
                "name": "VAL_NM_RQ",
                "type": "string",
                "description": "\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0432\u0430\u043b\u044e\u0442\u044b.",
                "default": null,
                "example": "R01235"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0441\u0442\u0430\u0442\u043a\u0430\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u0441\u0447\u0435\u0442\u0430\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0441\u0442\u0430\u0442\u043a\u0430\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u0441\u0447\u0435\u0442\u0430\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_ostat.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/06/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "05/06/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u043b\u043b\u043e\u0432",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0430\u043b\u043b\u043e\u0432 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_metall.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/07/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "13/07/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043c\u0435\u0436\u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0440\u044b\u043d\u043a\u0430",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043c\u0435\u0436\u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0440\u044b\u043d\u043a\u0430 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_mkr.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/07/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "13/07/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043f\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u043c \u0440\u044b\u043d\u043a\u0435",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043f\u043e \u0434\u0435\u043f\u043e\u0437\u0438\u0442\u043d\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0434\u0435\u043d\u0435\u0436\u043d\u043e\u043c \u0440\u044b\u043d\u043a\u0435 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_depo.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/07/2001"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "13/07/2001"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_News.asp",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u043e\u0434\u0430\u043c BIC",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 \u043a\u043e\u0434\u0430\u043c BIC (9 \u0437\u043d\u0430\u043a\u043e\u0432).",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XML_bic.asp",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "bic",
                "type": "string",
                "description": "\u041a\u043e\u0434 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 (9 \u0437\u043d\u0430\u043a\u043e\u0432).",
                "default": null,
                "example": "044525774"
              },
              {
                "name": "name",
                "type": "string",
                "description": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 (\u0447\u0430\u0441\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f) \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438.",
                "default": null,
                "example": "\u0410\u0412\u0422\u041e"
              }
            ]
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u00ab\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u043f\u00bb",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u00ab\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u0441\u0432\u043e\u043f\u00bb \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/xml_swap.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/12/2002"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "06/12/2002"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043e\u0442\u043f\u0443\u0441\u043a\u043d\u044b\u0445 \u0446\u0435\u043d \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043c\u043e\u043d\u0435\u0442\u044b",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043e\u0442\u043f\u0443\u0441\u043a\u043d\u044b\u0445 \u0446\u0435\u043d \u0411\u0430\u043d\u043a\u0430 \u0420\u043e\u0441\u0441\u0438\u0438 \u043d\u0430 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043c\u043e\u043d\u0435\u0442\u044b \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.",
            "method": "GET",
            "url": "http://www.cbr.ru/scripts/XMLCoinsBase.asp",
            "headers": [],
            "required_parameters": [
              {
                "name": "date_req1",
                "type": "string",
                "description": "\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "01/12/2005"
              },
              {
                "name": "date_req2",
                "type": "string",
                "description": "\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd/mm/yyyy.",
                "default": null,
                "example": "06/12/2005"
              }
            ],
            "optional_parameters": []
          },
          {
            "name": "\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0441 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435\u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c \u0440\u044b\u043d\u043a\u0435",
            "description": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0441 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435\u043b\u0435\u0433\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c \u0440\u044b\u043d\u043a\u0435.",
            "method": "GET",
            "url": "http://www.cbr.ru/ref/blacklist/BlackList.xml",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": []
          }
        ]
      },
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\89\\get_supported_currency_pairs_GET.py",
      "function_name": "get_supported_currency_pairs",
      "api_description": "Retrieves a list of supported currency pairs.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\9\\search_makeup_products_GET.py",
      "function_name": [],
      "api_description": {
        "title": "Makeup API Documentation",
        "endpoints": [
          {
            "name": "Search Makeup Products",
            "description": "Search for makeup products and filter them by various parameters such as brand, price, product category, and tags.",
            "method": "GET",
            "url": "http://makeup-api.herokuapp.com/api/v1/products.json",
            "headers": [],
            "required_parameters": [],
            "optional_parameters": [
              {
                "name": "product_type",
                "type": "string",
                "description": "The type of makeup being searched for (e.g., lipstick, eyeliner).",
                "default": null,
                "example": "lipstick"
              },
              {
                "name": "product_category",
                "type": "string",
                "description": "Sub-category for each makeup type (e.g., lip gloss is a category of lipstick).",
                "default": null,
                "example": "lip gloss"
              },
              {
                "name": "product_tags",
                "type": "string, list separated by commas",
                "description": "Options each product could be tagged with (e.g., vegan). Each product can have multiple tags.",
                "default": null,
                "example": "vegan,gluten free"
              },
              {
                "name": "brand",
                "type": "string",
                "description": "Brand of the product.",
                "default": null,
                "example": "maybelline"
              },
              {
                "name": "price_greater_than",
                "type": "number",
                "description": "Will return a list of products with price greater than the indicated number (exclusive).",
                "default": null,
                "example": 10
              },
              {
                "name": "price_less_than",
                "type": "number",
                "description": "Will return a list of products with price less than the indicated number (exclusive).",
                "default": null,
                "example": 50
              },
              {
                "name": "rating_greater_than",
                "type": "number",
                "description": "Will return a list of products with a rating more than the indicated number (exclusive).",
                "default": null,
                "example": 4
              },
              {
                "name": "rating_less_than",
                "type": "number",
                "description": "Will return a list of products with a rating less than the indicated number (exclusive).",
                "default": null,
                "example": 3
              }
            ]
          }
        ]
      },
      "status": "fail",
      "error_type": "Command '['python', 'extractor\\\\apidocs\\\\9\\\\search_makeup_products_GET.py']' returned non-zero exit status 1."
    },
    {
      "path": "extractor\\apidocs\\96\\get_nearest_outward_codes_for_a_given_longitude___latitude_GET.py",
      "function_name": "get_nearest_outward_codes_for_a_given_longitude___latitude",
      "api_description": "Retrieves nearest outward codes for a given longitude and latitude.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\96\\get_nearest_postcodes_for_a_given_longitude___latitude_GET.py",
      "function_name": "get_nearest_postcodes_for_a_given_longitude___latitude",
      "api_description": "Retrieves nearest postcodes for a given longitude and latitude.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\98\\get_multiple_quotes_GET.py",
      "function_name": "get_multiple_quotes",
      "api_description": "Retrieves an array of quotes from Stranger Things based on the specified number.",
      "status": "success",
      "error_type": null
    },
    {
      "path": "extractor\\apidocs\\map_other_md\\Search\\search_api_GET.py",
      "function_name": [],
      "api_description": null,
      "status": null,
      "error_type": null
    }
  ]
}