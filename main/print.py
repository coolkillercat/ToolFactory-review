print(r'''quote(\'abc def\') -> \'abc%20def\'\n\n    Each part of a URL, e.g. the path info, the query, etc., has a\n    different set of reserved characters that must be quoted. The\n    quote function offers a cautious (not minimal) way to quote a\n    string for most of these parts.\n\n    RFC 3986 Uniform Resource Identifier (URI): Generic Syntax lists\n    the following (un)reserved characters.\n\n    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"\n    reserved      = gen-delims / sub-delims\n    gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"\n    sub-delims    = "!" / "$" / "&" / "\'" / "(" / ")"\n                  / "*" / "+" / "," / ";" / "="\n\n    Each of the reserved characters is reserved in some component of a URL,\n    but not necessarily in all of them.\n\n    The quote function %-escapes all characters that are neither in the\n    unreserved chars ("always safe") nor the additional chars set via the\n    safe arg.\n\n    The default for the safe arg is \'/\'. The character is reserved, but in\n    typical usage the quote function is being called on a path where the\n    existing slash characters are to be preserved.\n\n    Python 3.7 updates from using RFC 2396 to RFC 3986 to quote URL strings.\n    Now, "~" is included in the set of unreserved characters.\n\n    string and safe may be either str or bytes objects. encoding and errors\n    must not be specified if string is a bytes object.\n\n    The optional encoding and errors parameters specify how to deal with\n    non-ASCII characters, as accepted by the str.encode method.\n    By default, encoding=\'utf-8\' (characters are encoded with UTF-8), and\n    errors=\'strict\' (unsupported characters raise a UnicodeEncodeError).''')