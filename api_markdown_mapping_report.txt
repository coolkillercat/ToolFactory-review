API Documentation Mapping Report
==================================================

API: OSRM
------------------------------
Total endpoints: 6

Endpoint: match_service_GET.py
  Query: match_service | Source: json_description
  Description: Map matching matches/snaps given GPS points to the road network in the most plausible way.
  Full Query: match_service Map matching matches/snaps given GPS points to the road network in the most plausible way. Mode of transportation, e.g., car, bike, or f...
  Total chunks in doc: 31
  Structured sections: 13
  Relevant matches found: 8
    1. Section: Match service (score: 0.778) [excellent]
       Preview: ### Match service

Map matching matches/snaps given GPS points to the road network in
the most plausible way.
Please note the request might result multiple sub-traces. Large jumps in
the timestamps (>...
       Section level: h3
    2. Chunk: Chunk 9 (### Match service) (score: 0.598) [good]
       Preview: with from the polyline encoded locations `qikdcB}~dpXkkHz`:
curl 'http://router.project-osrm.org/table/v1/driving/polyline(egs_Iq_aqAppHzbHulFzeMe`EuvKpnCglA)?sources=0;1;3&destinations=2;4'
```

### ...
       Position: 9354-10804 (1450 chars), 213 words
    3. Section: Nearest service (score: 0.587) [good]
       Preview: ### Nearest service

Snaps a coordinate to the street network and returns the nearest `n` matches.

Where `coordinates` only supports a single `{longitude},{latitude}` entry.

In addition to the [gene...
       Section level: h3
    4. Section: Route service (score: 0.561) [good]
       Preview: ### Route service

Finds the fastest route between coordinates in the supplied order.

In addition to the [general options](#general-options) the following options are supported for this service:

| O...
       Section level: h3
    5. Section: Trip service (score: 0.557) [good]
       Preview: ### Trip service

The trip plugin solves the Traveling Salesman Problem using a greedy heuristic (farthest-insertion algorithm).
The returned path does not have to be the fastest path, as TSP is NP-ha...
       Section level: h3

Endpoint: nearest_service_GET.py
  Query: nearest_service | Source: json_description
  Description: Snaps a coordinate to the street network and returns the nearest n matches.
  Full Query: nearest_service Snaps a coordinate to the street network and returns the nearest n matches. Mode of transportation, e.g., car, bike, or foot. A single...
  Total chunks in doc: 31
  Structured sections: 13
  Relevant matches found: 8
    1. Section: Nearest service (score: 0.731) [excellent]
       Preview: ### Nearest service

Snaps a coordinate to the street network and returns the nearest `n` matches.

Where `coordinates` only supports a single `{longitude},{latitude}` entry.

In addition to the [gene...
       Section level: h3
    2. Chunk: Chunk 3 (#### Example response) (score: 0.692) [good]
       Preview: n error the HTTP status code will be `400`. Otherwise the HTTP status code will be `200` and `code` will be `Ok`.

#### Example response

```
{
"code": "Ok",
"message": "Everything worked"
}
```

### ...
       Position: 3486-4563 (1077 chars), 162 words, 4 headings
    3. Section: Match service (score: 0.520) [good]
       Preview: ### Match service

Map matching matches/snaps given GPS points to the road network in
the most plausible way.
Please note the request might result multiple sub-traces. Large jumps in
the timestamps (>...
       Section level: h3
    4. Section: Table service (score: 0.496) [fair]
       Preview: ### Table service

Computes the duration of the fastest route between all pairs of supplied coordinates.

**Coordinates**

In addition to the [general options](#general-options) the following options ...
       Section level: h3
    5. Chunk: Chunk 5 (### Route service) (score: 0.490) [fair]
       Preview: KgDbbDgCUBAEAAAAAABoAAAAAAAAAPAAAABlnCQCLtwAA50vMADJZIQM8TMwArVghAwAAAQH1a66g",
"distance" : 15.872438,
"name" : "Friedrichstraße",
"location" : [
13.388775,
52.51717
],
}
],
"code" : "Ok"
}
```

### ...
       Position: 5207-6581 (1374 chars), 216 words

Endpoint: route_service_GET.py
  Query: route_service | Source: json_description
  Description: Finds the fastest route between coordinates in the supplied order.
  Full Query: route_service Finds the fastest route between coordinates in the supplied order. Mode of transportation, e.g., car, bike, or foot. String of format {l...
  Total chunks in doc: 31
  Structured sections: 13
  Relevant matches found: 8
    1. Section: Route service (score: 0.771) [excellent]
       Preview: ### Route service

Finds the fastest route between coordinates in the supplied order.

In addition to the [general options](#general-options) the following options are supported for this service:

| O...
       Section level: h3
    2. Section: Trip service (score: 0.648) [good]
       Preview: ### Trip service

The trip plugin solves the Traveling Salesman Problem using a greedy heuristic (farthest-insertion algorithm).
The returned path does not have to be the fastest path, as TSP is NP-ha...
       Section level: h3
    3. Chunk: Chunk 5 (### Route service) (score: 0.635) [good]
       Preview: KgDbbDgCUBAEAAAAAABoAAAAAAAAAPAAAABlnCQCLtwAA50vMADJZIQM8TMwArVghAwAAAQH1a66g",
"distance" : 15.872438,
"name" : "Friedrichstraße",
"location" : [
13.388775,
52.51717
],
}
],
"code" : "Ok"
}
```

### ...
       Position: 5207-6581 (1374 chars), 216 words
    4. Chunk: Chunk 6 (#### Example Request) (score: 0.632) [good]
       Preview: training uturns there even if it would be faster. Default value depends on the profile. |

\* Please note that even if an alternative route is requested, a result cannot be guaranteed.

**Response**

...
       Position: 6383-7472 (1089 chars), 133 words, 3 headings
    5. Chunk: Chunk 7 (### Table service) (score: 0.622) [good]
       Preview: in with three coordinates and no overview geometry returned:
curl 'http://router.project-osrm.org/route/v1/driving/13.388860,52.517037;13.397634,52.529407;13.428555,52.523219?overview=false'
```

### ...
       Position: 7273-8720 (1447 chars), 205 words

Endpoint: table_service_GET.py
  Query: table_service | Source: json_description
  Description: Computes the duration of the fastest route between all pairs of supplied coordinates.
  Full Query: table_service Computes the duration of the fastest route between all pairs of supplied coordinates. Mode of transportation, e.g., car, bike, or foot. ...
  Total chunks in doc: 31
  Structured sections: 13
  Relevant matches found: 8
    1. Section: Table service (score: 0.743) [excellent]
       Preview: ### Table service

Computes the duration of the fastest route between all pairs of supplied coordinates.

**Coordinates**

In addition to the [general options](#general-options) the following options ...
       Section level: h3
    2. Chunk: Chunk 7 (### Table service) (score: 0.660) [good]
       Preview: in with three coordinates and no overview geometry returned:
curl 'http://router.project-osrm.org/route/v1/driving/13.388860,52.517037;13.397634,52.529407;13.428555,52.523219?overview=false'
```

### ...
       Position: 7273-8720 (1447 chars), 205 words
    3. Section: Trip service (score: 0.573) [good]
       Preview: ### Trip service

The trip plugin solves the Traveling Salesman Problem using a greedy heuristic (farthest-insertion algorithm).
The returned path does not have to be the fastest path, as TSP is NP-ha...
       Section level: h3
    4. Chunk: Chunk 5 (### Route service) (score: 0.566) [good]
       Preview: KgDbbDgCUBAEAAAAAABoAAAAAAAAAPAAAABlnCQCLtwAA50vMADJZIQM8TMwArVghAwAAAQH1a66g",
"distance" : 15.872438,
"name" : "Friedrichstraße",
"location" : [
13.388775,
52.51717
],
}
],
"code" : "Ok"
}
```

### ...
       Position: 5207-6581 (1374 chars), 216 words
    5. Section: Route service (score: 0.556) [good]
       Preview: ### Route service

Finds the fastest route between coordinates in the supplied order.

In addition to the [general options](#general-options) the following options are supported for this service:

| O...
       Section level: h3

Endpoint: tile_service_GET.py
  Query: tile_service | Source: json_description
  Description: Generates Mapbox Vector Tiles that can be viewed with a vector-tile capable slippy-map viewer.
  Full Query: tile_service Generates Mapbox Vector Tiles that can be viewed with a vector-tile capable slippy-map viewer. Mode of transportation, e.g., car, bike, o...
  Total chunks in doc: 31
  Structured sections: 13
  Relevant matches found: 8
    1. Section: Tile service (score: 0.735) [excellent]
       Preview: ### Tile service

This service generates [Mapbox Vector Tiles](https://www.mapbox.com/developers/vector-tiles/)
that can be viewed with a vector-tile capable slippy-map viewer. The
tiles contain road ...
       Section level: h3
    2. Chunk: Chunk 13 (### Tile service) (score: 0.592) [good]
       Preview: `Route` objects that assemble the trace.

In case of error the following `code`s are supported in addition to the general ones:

| Type | Description |
| --- | --- |
| `NoTrips` | No trips found. |

A...
       Position: 14345-15745 (1400 chars), 185 words
    3. Section: Example response (score: 0.420) [fair]
       Preview: #### Example response

> ![example rendered tile](OSRM%20API%20Documentation_files/example-tile-response.png)
> <http://map.project-osrm.org/debug/#14.33/52.5212/13.3919>
       Section level: h4
    4. Chunk: Chunk 14 (####) (score: 0.403) [fair]
       Preview: or. Note that OSRM is hard-coded to only return tiles from zoom
level 12 and higher (to avoid accidentally returning extremely large
vector tiles).

Vector tiles contain two layers:

`speeds` layer:

...
       Position: 15548-17045 (1497 chars), 253 words
    5. Chunk: Chunk 15 (#### Example request) (score: 0.390) [fair]
       Preview: we think it takes to make that turn, in seconds. May be negative, depending on how the data model is constructed (some turns get a "bonus"). |

GET

/tile/v1/{profile}/tile({x},{y},{zoom}).mvt

#### E...
       Position: 16846-18182 (1336 chars), 180 words, 5 headings

Endpoint: trip_service_GET.py
  Query: trip_service | Source: json_description
  Description: Solves the Traveling Salesman Problem using a greedy heuristic.
  Full Query: trip_service Solves the Traveling Salesman Problem using a greedy heuristic. Mode of transportation, e.g., car, bike, or foot. String of format {longi...
  Total chunks in doc: 31
  Structured sections: 13
  Relevant matches found: 8
    1. Section: Trip service (score: 0.742) [excellent]
       Preview: ### Trip service

The trip plugin solves the Traveling Salesman Problem using a greedy heuristic (farthest-insertion algorithm).
The returned path does not have to be the fastest path, as TSP is NP-ha...
       Section level: h3
    2. Section: Table service (score: 0.557) [good]
       Preview: ### Table service

Computes the duration of the fastest route between all pairs of supplied coordinates.

**Coordinates**

In addition to the [general options](#general-options) the following options ...
       Section level: h3
    3. Chunk: Chunk 7 (### Table service) (score: 0.536) [good]
       Preview: in with three coordinates and no overview geometry returned:
curl 'http://router.project-osrm.org/route/v1/driving/13.388860,52.517037;13.397634,52.529407;13.428555,52.523219?overview=false'
```

### ...
       Position: 7273-8720 (1447 chars), 205 words
    4. Section: Route service (score: 0.524) [good]
       Preview: ### Route service

Finds the fastest route between coordinates in the supplied order.

In addition to the [general options](#general-options) the following options are supported for this service:

| O...
       Section level: h3
    5. Chunk: Chunk 12 (score: 0.519) [good]
       Preview: roximation.
Note that if the input coordinates can not be joined by a single trip (e.g. the coordinates are on several disconnected islands)
multiple trips for each connected component are returned.

...
       Position: 13051-14543 (1492 chars), 245 words

==================================================

API: Search
------------------------------
Total endpoints: 1

Endpoint: search_GET.py
  Query: search | Source: json_description
  Description: The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries.
  Full Query: search The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queri...
  Total chunks in doc: 14
  Structured sections: 4
  Relevant matches found: 8
    1. Chunk: Chunk 0 (# Search queries) (score: 0.763) [excellent]
       Preview: Search - Nominatim Manual

[Skip to content](#search-queries)

# Search queries

The search API allows you to look up a location from a textual description
or address. Nominatim supports structured an...
       Position: 0-1419 (1419 chars), 189 words, 4 headings
    2. Section: Endpoint (score: 0.732) [excellent]
       Preview: ## Endpoint

The search API has the following format:

```
https://nominatim.openstreetmap.org/search?<params>

```

The query term can be given in two different forms: free-form or structured.

### F...
       Section level: h2
    3. Chunk: Chunk 1 (### Structured query) (score: 0.608) [good]
       Preview: performance by reducing the complexity of the search.

The free-form may also contain special phrases to describe the type of
place to be returned or a coordinate to search close to a position.

### S...
       Position: 1220-2662 (1442 chars), 253 words, 3 headings
    4. Chunk: Chunk 8 (## Examples) (score: 0.581) [good]
       Preview: utput assorted developer debug information. Data on internals of Nominatim's
"search loop" logic, and SQL queries. The output is HTML format.
This overrides the specified machine readable format.

## ...
       Position: 9214-10503 (1289 chars), 91 words, 2 headings
    5. Chunk: Chunk 4 (score: 0.516) [good]
       Preview: code based
on OSM country boundaries. In rare cases a place may not be in any country
at all, for example, when it is in international waters. These places are
also excluded when the filter is set.

|...
       Position: 4686-5961 (1275 chars), 206 words

==================================================
