{
  "match_service_GET.py": "# Match service\n\n### Match service\n\nMap matching matches/snaps given GPS points to the road network in\nthe most plausible way.\nPlease note the request might result multiple sub-traces. Large jumps in\nthe timestamps (> 60s) or improbable transitions lead to trace\nsplits if a complete matching could not be found.\nThe algorithm might not be able to match all points. Outliers are\nremoved if they can not be matched successfully.\n\nIn addition to the [general options](#general-options) the following options are supported for this service:\n\n| Option | Values | Description |\n| --- | --- | --- |\n| steps | `true` , `false` (default) | Return route steps for each route |\n| geometries | `polyline` (default), `polyline6` , `geojson` | Returned route geometry format (influences overview and per step) |\n| annotations | `true` , `false` (default) | Returns additional metadata for each coordinate along the route geometry. |\n| overview | `simplified` (default), `full` , `false` | Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. |\n| timestamps | `{timestamp};{timestamp}[;{timestamp} ...]` | Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. |\n| radiuses | `{radius};{radius}[;{radius} ...]` | Standard deviation of GPS precision used for map matching. If applicable use GPS accuracy. |\n\n| Parameter | Values |\n| --- | --- |\n| timestamp | `integer` seconds since UNIX epoch |\n| radius | `double >= 0` (default 5m) |\n\nThe radius for each point should be the standard error of the location measured in meters from the true location.\nUse `Location.getAccuracy()` on Android or `CLLocation.horizontalAccuracy`\non iOS.\nThis value is used to determine which points should be considered as\ncandidates (larger radius means more candidates) and how likely each\ncandidate is (larger radius means far-away candidates are penalized\nless).\nThe area to search is chosen such that the correct candidate should be\nconsidered 99.9% of the time (for more details see [this ticket](https://github.com/Project-OSRM/osrm-backend/pull/3184)).\n\n**Response**\n\n- `code` if the request was successful `Ok` otherwise see the service dependent and general status codes.\n- `tracepoints`: Array of `Waypoint` objects representing all points of the trace in order.\nIf the trace point was ommited by map matching because it is an outlier, the entry will be `null`.\nEach `Waypoint` object has the following additional properties:\n\n- `matchings_index`: Index to the `Route` object in `matchings` the sub-trace was matched to.\n- `waypoint_index`: Index of the waypoint inside the matched route.\n- `matchings`: An array of `Route` objects that assemble the trace. Each `Route` object has the following additional properties:\n\n- `confidence`: Confidence of the matching. `float` value between 0 and 1. 1 is very confident that the matching is correct.\n\nIn case of error the following `code`s are supported in addition to the general ones:\n\n| Type | Description |\n| --- | --- |\n| `NoMatch` | No matchings found. |\n\nAll other fields might be undefined.\n\nGET\n\n/match/v1/{profile}/{coordinates}?steps={true|false}&geometries={polyline|polyline6|geojson}&overview={simplified|full|false}&annotations={true|false}",
  "nearest_service_GET.py": "# Nearest service\n\n### Nearest service\n\nSnaps a coordinate to the street network and returns the nearest `n` matches.\n\nWhere `coordinates` only supports a single `{longitude},{latitude}` entry.\n\nIn addition to the [general options](#general-options) the following options are supported for this service:\n\n| Option | Values | Description |\n| --- | --- | --- |\n| number | `integer >= 1` (default `1` ) | Number of nearest segments that should be returned. |\n\n**Response**\n\n- `code` if the request was successful `Ok` otherwise see the service dependent and general status codes.\n- `waypoints` array of `Waypoint` objects sorted by distance to the input coordinate. Each object has at least the following additional properties:\n\n- `distance`: Distance in meters to the supplied input coordinate.\n\nGET\n\nhttp://{server}/nearest/v1/{profile}/{coordinates}.json?number={number}\n\n#### Example Requests\n\n```",
  "route_service_GET.py": "# Route service\n\n### Route service\n\nFinds the fastest route between coordinates in the supplied order.\n\nIn addition to the [general options](#general-options) the following options are supported for this service:\n\n| Option | Values | Description |\n| --- | --- | --- |\n| alternatives | `true` , `false` (default) | Search for alternative routes and return as well. \\* |\n| steps | `true` , `false` (default) | Return route steps for each route leg |\n| annotations | `true` , `false` (default) | Returns additional metadata for each coordinate along the route geometry. |\n| geometries | `polyline` (default), `polyline6` , `geojson` | Returned route geometry format (influences overview and per step) |\n| overview | `simplified` (default), `full` , `false` | Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. |\n| continue \\_ straight | `default` (default), `true` , `false` | Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile. |\n\n\\* Please note that even if an alternative route is requested, a result cannot be guaranteed.\n\n**Response**\n\n- `code` if the request was successful `Ok` otherwise see the service dependent and general status codes.\n- `waypoints`: Array of `Waypoint` objects representing all waypoints in order:\n- `routes`: An array of `Route` objects, ordered by descending recommendation rank.\n\nIn case of error the following `code`s are supported in addition to the general ones:\n\n| Type | Description |\n| --- | --- |\n| `NoRoute` | No route found. |\n\nAll other fields might be undefined.\n\nGET\n\n/route/v1/{profile}/{coordinates}?alternatives={true|false}&steps={true|false}&geometries={polyline|polyline6|geojson}&overview={full|simplified|false}&annotations={true|false}\n\n#### Example Request\n\n```",
  "table_service_GET.py": "# Table service\n\n### Table service\n\nComputes the duration of the fastest route between all pairs of supplied coordinates.\n\n**Coordinates**\n\nIn addition to the [general options](#general-options) the following options are supported for this service:\n\n| Option | Values | Description |\n| --- | --- | --- |\n| sources | `{index};{index}[;{index} ...]` or `all` (default) | Use location with given index as source. |\n| destinations | `{index};{index}[;{index} ...]` or `all` (default) | Use location with given index as destination. |\n\nUnlike other array encoded options, the length of `sources` and `destinations` can be **smaller or equal**\nto number of input locations;\n\n**Example:**\n\n```\nsources=0;5;7&destinations=5;1;4;2;3;6\n\n```\n\n| Element | Values |\n| --- | --- |\n| index | `0 <= integer < #locations` |\n\n**Response**\n\n- `code` if the request was successful `Ok` otherwise see the service dependent and general status codes.\n- `durations` array of arrays that stores the matrix in row-major order. `durations[i][j]` gives the travel time from\nthe i-th waypoint to the j-th waypoint. Values are given in seconds.\n- `sources` array of `Waypoint` objects describing all sources in order\n- `destinations` array of `Waypoint` objects describing all destinations in order\n\nIn case of error the following `code`s are supported in addition to the general ones:\n\n| Type | Description |\n| --- | --- |\n| `NoTable` | No route found. |\n\nAll other fields might be undefined.\n\nGET\n\n/table/v1/{profile}/{coordinates}?{sources}=[{elem}...];&destinations=[{elem}...]\n\n#### Example Request\n\n```",
  "tile_service_GET.py": "# Tile service\n\n### Tile service\n\nThis service generates [Mapbox Vector Tiles](https://www.mapbox.com/developers/vector-tiles/)\nthat can be viewed with a vector-tile capable slippy-map viewer. The\ntiles contain road geometries and metadata that can be used to examine\nthe routing graph. The tiles are generated directly from the data\nin-memory, so are in sync with actual routing results, and let you\nexamine which roads are actually routable, and what weights they have\napplied.\n\nThe `x`, `y`, and `zoom` values are the same as described at <https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames>, and are supported by vector tile viewers like [Mapbox GL JS](https://www.mapbox.com/mapbox-gl-js/api/).\n\nThe response object is either a binary encoded blob with a `Content-Type` of `application/x-protobuf`, or a `404`\nerror. Note that OSRM is hard-coded to only return tiles from zoom\nlevel 12 and higher (to avoid accidentally returning extremely large\nvector tiles).\n\nVector tiles contain two layers:\n\n`speeds` layer:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `speed` | `integer` | the speed on that road segment, in km/h |\n| `is_small` | `boolean` | whether this segment belongs to a small (< 1000 node) [strongly connected component](https://en.wikipedia.org/wiki/Strongly_connected_component) |\n| `datasource` | `string` | the source for the speed value (normally `lua profile` unless you're using the [traffic update feature](https://github.com/Project-OSRM/osrm-backend/wiki/Traffic) , in which case it contains the stem of the filename that supplied the speed value for this segment |\n| `duration` | `float` | how long this segment takes to traverse, in seconds |\n| `name` | `string` | the name of the road this segment belongs to |\n\n`turns` layer:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `bearing_in` | `integer` | the absolute bearing that approaches the intersection. -180 to +180, 0 = North, 90 = East |\n| `turn_angle` | `integer` | the angle of the turn, relative to the `bearing_in` . -180 to +180, 0 = straight ahead, 90 = 90-degrees to the right |\n| `cost` | `float` | the time we think it takes to make that turn, in seconds. May be negative, depending on how the data model is constructed (some turns get a \"bonus\"). |\n\nGET\n\n/tile/v1/{profile}/tile({x},{y},{zoom}).mvt\n\n#### Example request\n\n```",
  "trip_service_GET.py": "# Trip service\n\n### Trip service\n\nThe trip plugin solves the Traveling Salesman Problem using a greedy heuristic (farthest-insertion algorithm).\nThe returned path does not have to be the fastest path, as TSP is NP-hard it is only an approximation.\nNote that if the input coordinates can not be joined by a single trip (e.g. the coordinates are on several disconnected islands)\nmultiple trips for each connected component are returned.\n\nIn addition to the [general options](#general-options) the following options are supported for this service:\n\n| Option | Values | Description |\n| --- | --- | --- |\n| steps | `true` , `false` (default) | Return route instructions for each trip |\n| annotations | `true` , `false` (default) | Returns additional metadata for each coordinate along the route geometry. |\n| geometries | `polyline` (default), `polyline6` , `geojson` | Returned route geometry format (influences overview and per step) |\n| overview | `simplified` (default), `full` , `false` | Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. |\n\n**Response**\n\n- `code` if the request was successful `Ok` otherwise see the service dependent and general status codes.\n- `waypoints`: Array of `Waypoint` objects representing all waypoints in input order. Each `Waypoint` object has the following additional properties:\n\n- `trips_index`: Index to `trips` of the sub-trip the point was matched to.\n- `waypoint_index`: Index of the point in the trip.\n- `trips`: An array of `Route` objects that assemble the trace.\n\nIn case of error the following `code`s are supported in addition to the general ones:\n\n| Type | Description |\n| --- | --- |\n| `NoTrips` | No trips found. |\n\nAll other fields might be undefined.\n\nGET\n\n/trip/v1/{profile}/{coordinates}?steps={true|false}&geometries={polyline|polyline6|geojson}&overview={simplified|full|false}&annotations={true|false}'"
}